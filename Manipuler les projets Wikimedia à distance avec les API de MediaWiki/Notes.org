* Infos
** Titre : Manipuler les projets Wikimedia à distance avec les API de MediaWiki
** Date et heure : dimanche 8 septembre, 10 h 00
** Durée : 1 heure
** Lieu : salle H2.214 (56 personnes)
** Description : [[https://meta.wikimedia.org/wiki/WikiConvention_francophone/2019/Programme/Manipuler les projets Wikimedia à distance avec les API de MediaWiki][meta]]
** Notes : [[https://notes.wikimedia.fr/public_pad/WikiConvFR19_API][pad]]
** Suite : Atelier SPARQL
* Description
La plupart des personnes utilisant et contribuant aux projets Wikimedia le font
via les sites web et les applications mobiles de la fondation Wikimedia. Il est
cependant possible d'interagir avec des interfaces alternatives, des outils
facilitant ou automatisant certaines interactions (comme les robots)… Cet
atelier vise à découvrir les possibilités qu'offrent les différentes API
(interfaces de programmation) du logiciel MediaWiki et à en exploiter certaines
pour manipuler les projets Wikimedia « à distance » (suivre les modifications
apportées aux articles, modifier des pages…).
* TODO Plan [2/11]
** Manipulations « classiques »
 - Site web
 - App mobile
** TODO Définition API
Moyen de communication entre un projet Wikimedia et un programme.
** TODO Exemples utilisations API
 - Bots (Salebot, OrlodrimBot… bots viwiki, bots Wikidata, pywikibot, etc.)
 - Scripts / gadgets (LiveRC…)
 - Sites web (exemples ?)
 - L'app mobile est en réalité basée sur l'API
 - Le site aussi (en partie)
 - Ce qui ne peut pas utiliser l'API : modèles, Lua… (vérifier)
 - https://tools.wmflabs.org/apps-gallery/
** DONE Multiples APIs
 - index.php
 - api.php
 - https://en.wikipedia.org/api/rest_v1/ (Mobile, VisualEditor / Parsoid, ContentTranslation, Flow, Pageview) ; [[https://en.wiktionary.org/api/rest_v1/#/Page%20content/get_page_definition__term_][exemple wiktionnaire]]
 - [[https://www.mediawiki.org/wiki/Parsoid/API][parsoid]], [[https://www.mediawiki.org/wiki/Web_APIs_hub][etc.]]
 - https://wikitech.wikimedia.org/wiki/Event_Platform/EventStreams
 - https://wikitech.wikimedia.org/wiki/Analytics/AQS/Pageviews
 - WDQS (rester à la présentation suivante !)
** TODO Présentation de Spécial:Apihelp
** TODO Présentation de Spécial:Apisandbox
** TODO Présentation de rest_v1
** TODO Manipulation via le navigateur
 - Parce que déjà authentifié
 - ⇒ c'est ce qui se passe avec les scripts / gadgets
 - Choix du format de sortie
** TODO Manipulation via JavaScript
 - Go https://test2.wikipedia.org
 - Go
 - Mini script / gadget utilisant l'API
#+BEGIN_SRC js
$( function() { // TODO uniquement sur Spécial:Nouvelles_pages
    $( '<a>bienvenuter</a>' ).click( function() {
	var api = new mw.Api();
	api.get(
	    {
		"action": "query",
		"format": "json",
		"meta": "tokens"
	    }
	).done( function ( data ) {
	    api.post(
		{
		    "action": "edit",
		    "format": "json",
		    "title": "User:Arktest/bienvenue", // TODO PdD de l'utilisateur
		    "section": "new",
		    "sectiontitle": "Bienvenue sur Wikipédia !",
		    "text": "Hello !~~~~", // TODO message de bienvenue
		    "summary": "Bienvenue !",
		    "token": data.query.tokens.csrftoken
		}
	    ).done( function ( data ) {
		console.log( 'CEFE!' ); // TODO feedback
	    } );
	} );
    } ).insertAfter( $( '.mw-usertoollinks-contribs' ) ).before( ' | ' );
} );
#+END_SRC
 - En utilisant JSON
 - GET vs POST
 - Montrer la console réseau de Firefox
** TODO Présentation de EventStreams
** TODO Manipulation via httpie / jq
 - C'est vraiment à distance
 - Requêtes de lectures simples
 - Affichage de ce qui transite
 - Requête de modification anonyme
 - Requête d'authentification
 - Requête de modification authentifiée
 - Suivi des modifications
** TODO Manipulation via un langage de scripts
 - Python (mini-bot)
 - Pywikibot
** TODO Manipulation via une appli mobile
 - Kotlin (wmrc)
** TODO Résumé, plusieurs façons de manipuler
*** Dans le navigateur (typiquement en JavaScript)
**** Avantages
 - Toute la partie authentification est gérée par MediaWiki
 - Disponible partout, avec seulement un navigateur
**** Inconvénients
 - Ne fonctionne que depuis les sites Wikimedia (same origin policy / CORS)
 - Difficile à lancer sans être humain (pas de cron…)
 - Uniquement en JavaScript (écosystème restreint)
*** Hors du navigateur (typiquement en Python, Java…)
**** Avantages
 - Choix de la techno (Python, Java, shell…)
 - Choix de la plateforme (PC, mobile, raspberry pi…)
 - 100 % automatisable
**** Inconvénients
 - Authentification à gérer à la main
 - Nécessite l'environnement approprié
*** Dans le navigateur, via un autre serveur qui utilise hors du navigateur avec oauth2
**** Avantages
 - Choix de la techno (Python, Java, shell…)
 - 100 % automatisable
 - Disponible partout, avec seulement un navigateur
 - La partie authentification est en partie gérée par MediaWiki
**** Inconvénients
 - Complexe à mettre en place
 - Nécessite un serveur
** DONE Complément d'information
 - https://www.mediawiki.org/wiki/API:Main_page/fr
 - Special:Apihelp
 - Special:ApiSandbox
 - [[https://lists.wikimedia.org/mailman/listinfo/mediawiki-api][mediawiki-api]]
* TODO Scénarios
 - [X] Bienvenutage de nouveau en JS
 - [ ] Autorevert + avertissement en JS
 - [ ] Stats sur un utilisateur en curl
* TODO Timing
 - Faire seulement un exemple de chaque (le temps d'installer curl, Python…) et revenir en arrière s'il reste du temps à la fin
